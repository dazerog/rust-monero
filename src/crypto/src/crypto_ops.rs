/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}

pub type fe = [i32; 10usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ge_p2 {
    pub X: fe,
    pub Y: fe,
    pub Z: fe,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ge_p3 {
    pub X: fe,
    pub Y: fe,
    pub Z: fe,
    pub T: fe,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ge_p1p1 {
    pub X: fe,
    pub Y: fe,
    pub Z: fe,
    pub T: fe,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ge_precomp {
    pub yplusx: fe,
    pub yminusx: fe,
    pub xy2d: fe,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ge_cached {
    pub YplusX: fe,
    pub YminusX: fe,
    pub Z: fe,
    pub T2d: fe,
}
extern "C" {
    #[link_name = "\u{1}_ge_add"]
    pub fn ge_add(arg1: *mut ge_p1p1, arg2: *const ge_p3, arg3: *const ge_cached);
}
pub type ge_dsmp = [ge_cached; 8usize];
extern "C" {
    #[link_name = "\u{1}_ge_Bi"]
    pub static mut ge_Bi: [ge_precomp; 8usize];
}
extern "C" {
    #[link_name = "\u{1}_ge_dsm_precomp"]
    pub fn ge_dsm_precomp(r: *mut ge_cached, s: *const ge_p3);
}
extern "C" {
    #[link_name = "\u{1}_ge_double_scalarmult_base_vartime"]
    pub fn ge_double_scalarmult_base_vartime(
        arg1: *mut ge_p2,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ge_p3,
        arg4: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ge_double_scalarmult_base_vartime_p3"]
    pub fn ge_double_scalarmult_base_vartime_p3(
        arg1: *mut ge_p3,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ge_p3,
        arg4: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_fe_sqrtm1"]
    pub static fe_sqrtm1: fe;
}
extern "C" {
    #[link_name = "\u{1}_fe_d"]
    pub static fe_d: fe;
}
extern "C" {
    #[link_name = "\u{1}_ge_frombytes_vartime"]
    pub fn ge_frombytes_vartime(
        arg1: *mut ge_p3,
        arg2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ge_p1p1_to_p2"]
    pub fn ge_p1p1_to_p2(arg1: *mut ge_p2, arg2: *const ge_p1p1);
}
extern "C" {
    #[link_name = "\u{1}_ge_p1p1_to_p3"]
    pub fn ge_p1p1_to_p3(arg1: *mut ge_p3, arg2: *const ge_p1p1);
}
extern "C" {
    #[link_name = "\u{1}_ge_p2_dbl"]
    pub fn ge_p2_dbl(arg1: *mut ge_p1p1, arg2: *const ge_p2);
}
extern "C" {
    #[link_name = "\u{1}_fe_d2"]
    pub static fe_d2: fe;
}
extern "C" {
    #[link_name = "\u{1}_ge_p3_to_cached"]
    pub fn ge_p3_to_cached(arg1: *mut ge_cached, arg2: *const ge_p3);
}
extern "C" {
    #[link_name = "\u{1}_ge_p3_to_p2"]
    pub fn ge_p3_to_p2(arg1: *mut ge_p2, arg2: *const ge_p3);
}
extern "C" {
    #[link_name = "\u{1}_ge_p3_tobytes"]
    pub fn ge_p3_tobytes(arg1: *mut ::std::os::raw::c_uchar, arg2: *const ge_p3);
}
extern "C" {
    #[link_name = "\u{1}_ge_base"]
    pub static mut ge_base: [[ge_precomp; 8usize]; 32usize];
}
extern "C" {
    #[link_name = "\u{1}_ge_scalarmult_base"]
    pub fn ge_scalarmult_base(arg1: *mut ge_p3, arg2: *const ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_ge_tobytes"]
    pub fn ge_tobytes(arg1: *mut ::std::os::raw::c_uchar, arg2: *const ge_p2);
}
extern "C" {
    #[link_name = "\u{1}_sc_reduce"]
    pub fn sc_reduce(arg1: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_ge_scalarmult"]
    pub fn ge_scalarmult(
        arg1: *mut ge_p2,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ge_p3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ge_scalarmult_p3"]
    pub fn ge_scalarmult_p3(
        arg1: *mut ge_p3,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ge_p3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ge_double_scalarmult_precomp_vartime"]
    pub fn ge_double_scalarmult_precomp_vartime(
        arg1: *mut ge_p2,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ge_p3,
        arg4: *const ::std::os::raw::c_uchar,
        arg5: *mut ge_cached,
    );
}
extern "C" {
    #[link_name = "\u{1}_ge_double_scalarmult_precomp_vartime2"]
    pub fn ge_double_scalarmult_precomp_vartime2(
        arg1: *mut ge_p2,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ge_cached,
        arg4: *const ::std::os::raw::c_uchar,
        arg5: *mut ge_cached,
    );
}
extern "C" {
    #[link_name = "\u{1}_ge_double_scalarmult_precomp_vartime2_p3"]
    pub fn ge_double_scalarmult_precomp_vartime2_p3(
        arg1: *mut ge_p3,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ge_cached,
        arg4: *const ::std::os::raw::c_uchar,
        arg5: *mut ge_cached,
    );
}
extern "C" {
    #[link_name = "\u{1}_ge_mul8"]
    pub fn ge_mul8(arg1: *mut ge_p1p1, arg2: *const ge_p2);
}
extern "C" {
    #[link_name = "\u{1}_fe_ma2"]
    pub static fe_ma2: fe;
}
extern "C" {
    #[link_name = "\u{1}_fe_ma"]
    pub static fe_ma: fe;
}
extern "C" {
    #[link_name = "\u{1}_fe_fffb1"]
    pub static fe_fffb1: fe;
}
extern "C" {
    #[link_name = "\u{1}_fe_fffb2"]
    pub static fe_fffb2: fe;
}
extern "C" {
    #[link_name = "\u{1}_fe_fffb3"]
    pub static fe_fffb3: fe;
}
extern "C" {
    #[link_name = "\u{1}_fe_fffb4"]
    pub static fe_fffb4: fe;
}
extern "C" {
    #[link_name = "\u{1}_ge_p3_identity"]
    pub static ge_p3_identity: ge_p3;
}
extern "C" {
    #[link_name = "\u{1}_ge_p3_H"]
    pub static ge_p3_H: ge_p3;
}
extern "C" {
    #[link_name = "\u{1}_ge_fromfe_frombytes_vartime"]
    pub fn ge_fromfe_frombytes_vartime(arg1: *mut ge_p2, arg2: *const ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_sc_0"]
    pub fn sc_0(arg1: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_sc_reduce32"]
    pub fn sc_reduce32(arg1: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_sc_add"]
    pub fn sc_add(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_sc_sub"]
    pub fn sc_sub(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_sc_mulsub"]
    pub fn sc_mulsub(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ::std::os::raw::c_uchar,
        arg4: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_sc_mul"]
    pub fn sc_mul(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_sc_muladd"]
    pub fn sc_muladd(
        s: *mut ::std::os::raw::c_uchar,
        a: *const ::std::os::raw::c_uchar,
        b: *const ::std::os::raw::c_uchar,
        c: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_sc_check"]
    pub fn sc_check(arg1: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sc_isnonzero"]
    pub fn sc_isnonzero(arg1: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_load_3"]
    pub fn load_3(in_: *const ::std::os::raw::c_uchar) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_load_4"]
    pub fn load_4(in_: *const ::std::os::raw::c_uchar) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_ge_sub"]
    pub fn ge_sub(r: *mut ge_p1p1, p: *const ge_p3, q: *const ge_cached);
}
extern "C" {
    #[link_name = "\u{1}_fe_add"]
    pub fn fe_add(h: *mut i32, f: *mut i32, g: *mut i32);
}
extern "C" {
    #[link_name = "\u{1}_fe_tobytes"]
    pub fn fe_tobytes(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut i32);
}
extern "C" {
    #[link_name = "\u{1}_fe_invert"]
    pub fn fe_invert(out: *mut i32, z: *mut i32);
}
extern "C" {
    #[link_name = "\u{1}_ge_p3_is_point_at_infinity"]
    pub fn ge_p3_is_point_at_infinity(p: *const ge_p3) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
